// Heap based priority queue
#include <iostream>
#include <string>
#include<queue>
using namespace std;

struct item {
    int val;
    int priority;
};


class priorityQueue
{
private:
    vector<item> heap;
    int size = 0;
public:
    priorityQueue() : heap(20){}
  void insert (int x, int priority)
  {
    item newItem; newItem.val = x; newItem.priority = priority;
    heap[size] = newItem;
    bubbleUp();
    size++;
  }
  
  int getMax(){
      return heap.front().val;
  }
  
  void removeMax(){
    heap[0] = heap[--size];
    //cout<<"Before bubble"<<endl;
    //display();
    bubbleDown();
    //cout<<"after bubble"<<endl;
  }
  
  void bubbleUp(){
      int i = size;
      while(heap[i].priority > heap[parentIndex(i)].priority){
          swap(i, parentIndex(i));
          i = parentIndex(i);
      }
  }
  
  void bubbleDown(){
      int i = 0;
      while((heap[i].priority < heap[leftIndex(i)].priority) || (heap[i].priority < heap[rightIndex(i)].priority)){
          if(heap[leftIndex(i)].priority > heap[rightIndex(i)].priority){
              if(leftIndex(i) > size) break;
              swap(i,leftIndex(i));
              i = leftIndex(i);
          }
          else{
              if (rightIndex(i) > size) break;
              swap(i,rightIndex(i));
              i = rightIndex(i);
          }
      }
  }
  
  int leftIndex(int i){
      return i*2+1;
  }
  
  int rightIndex(int i){
      return i*2+2;
  }
  
  int parentIndex(int i){
      return (i-1)/2;
  }
  
  void swap(int first, int second){
      item temp = heap[first];
      heap[first] = heap[second];
      heap[second] = temp;
  }
  
  void display(){
      for(int i = 0; i < size; i++){
          cout<<heap[i].val<<":"<<heap[i].priority<<" ";
      }
      cout<<endl;
  }

};

int
main ()
{
    priorityQueue h;
    h.insert(5,2);
    h.insert(3,6);
    h.insert(2,9);
    h.insert(4,110);
    h.insert(13,1);
    h.insert(23,3);
    h.insert(6,4);
    h.display();
    h.removeMax();
    h.display();
        
    h.removeMax();
    h.display();
        
    h.removeMax();
    h.display();
        
    
}
